<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_seagull</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize seagull
//Speed = 9001, etc
BASE_SPEED = 5;
multiplier = 1;
MULTIPLIER_COOLDOWN = 5;
multiplier_triggered = false;
counter = 0;
remaining_time = 0;
game_time = 0;

Seacounter = 0;

//Animation frames
ANIM_LVL1_MOVE_START = 0
ANIM_LVL1_MOVE_END = 11
ANIM_LVL2_MOVE_START = 23
ANIM_LVL2_MOVE_END = 37
ANIM_LVL3_MOVE_START = 47
ANIM_LVL3_MOVE_END = 59

forward_speed = BASE_SPEED;
swooping = false;
drop = false;
hover_mode = false;
fly_mode = true;

item_held = false;

// Sam A - Growing Varibles;
experience = 0
weight = 1;
next_level_exp = 10
level = 1
size = 1

evolving = false;
evo_alpha = 0.0
evo_hzoom = 0.0
evo_vzoom = 0.0
evo_dir = 0.0

var dir = 0.0

held_item = noone;

//
state = scr_seagull_move_state

//set scale
image_xscale = 0.25;
image_yscale = 0.25;

//Greg's code for scaling swoop
scaleCounter = 0;
initialScaleX = obj_seagull.image_xscale;
initialScaleY = obj_seagull.image_yscale;

image_speed = 0;

//Bass constantly play
snd = audio_play_sound(snd_bass, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_bass2, 0, 1);
audio_sound_gain(snd, 1, 0);

//Level2
snd = audio_play_sound(snd_first1, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_first2, 0 , 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_second1, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_second2, 0 , 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_second3, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_second4, 0 , 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_third1, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_third2, 0 , 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_fourth1, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_fifth1, 0, 1);
audio_sound_gain(snd, 1, 0);
snd = audio_play_sound(snd_sixth1, 0, 1);
audio_sound_gain(snd, 1, 0);

//Level3
snd = audio_play_sound(snd_spook1, 0, 1);
audio_sound_gain(snd, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Timer 2
obj_seagull.evolving = false;
obj_seagull.state = scr_seagull_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm for Swooping
drop = false;
swooping = false;
forward_speed = BASE_SPEED;
state = scr_seagull_move_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Seagull Movement
script_execute(state);

//image_angle = point_direction(x, y, mouse_x, mouse_y);

//if (fly_mode)
//{
//
//    move_towards_point(mouse_x,mouse_y,forward_speed);
//    //Move forward
//}

game_time++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Direction Facing
if(hover_mode)
{
    obj_seagull.image_angle = -path_position * 360;
 }
 else
 {
    obj_seagull.image_angle = point_direction( obj_seagull.x,  obj_seagull.y, mouse_x, mouse_y);
 }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Multiplier
//If in cooldown period, each explosion multiplies multiplier by 2.
//If cooldown expires, reset to 1x.

if (counter &gt; MULTIPLIER_COOLDOWN * room_speed)
{
    multiplier = 1;
    counter = 0;
    multiplier_triggered = false;
}
else if (multiplier_triggered == true)
{
    multiplier += 0.2;
    multiplier_triggered = false;
}

if (counter != 0)
{
    counter++;
}
remaining_time = (MULTIPLIER_COOLDOWN * room_speed) - counter;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sea Moving

if(Seacounter &gt; 0)
{
    Seacounter--;
    scr_trigger_wave();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw multiplier, score.
draw_text(window_get_width() - 50, window_get_height() - 50, string(multiplier) + "X");
draw_text(window_get_width() - 200, window_get_height() - 30, "Score: " + string(score));
draw_healthbar(0, 10, 100, 20, remaining_time, c_black, c_red, c_green, 0, true, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set shader if evolving

if (self.evolving)
{
    if((alarm[1] % 30) &lt; 15)
    {
        shader_set(Evolution_Shader);
        draw_self()
        shader_reset();
    }
    else
    {
        draw_self();
    
    }
    
}
else
{
    image_speed = 10/room_speed;
    if (level == 1)
    {
        if (image_index &gt;= ANIM_LVL1_MOVE_END)
        {
            image_index = ANIM_LVL1_MOVE_START;
        }
    }
    else if (level == 2)
    {
        if (image_index &gt;= ANIM_LVL2_MOVE_END)
        {
            image_index = ANIM_LVL2_MOVE_START;
        }
    }
    else if (level == 3)
    {
        if (image_index &gt;= ANIM_LVL3_MOVE_END)
        {
            image_index = ANIM_LVL3_MOVE_START;
        }
    }
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(initialScaleX);
show_debug_message(obj_trash.initialScaleX);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
